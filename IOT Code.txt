// === Core Arduino Libraries ===
#include <Arduino.h>        // Core Arduino functions
#include <Wire.h>           // I2C communication
#include <SPI.h>            // SPI communication
#include <EEPROM.h>         // For saving persistent data like mileage

// === Sensor-Specific Libraries (Optional/Future Use) ===
#include <OneWire.h>        // For DS18B20 Temp Sensor (if used)
#include <DallasTemperature.h> // For DS18B20 advanced support
#include <Adafruit_Sensor.h>   // Sensor base class
#include <Adafruit_MLX90614.h> // IR Temp Sensor (if used)
#include <Adafruit_BMP280.h>   // Barometric pressure/temp sensor
#include <Adafruit_GFX.h>      // For OLED Display support
#include <Adafruit_SSD1306.h>  // For OLED Display 128x64
#include <SoftwareSerial.h>    // For GPS, GSM modules
#include <SD.h>                // SD card logging
#include <WiFi.h>              // ESP32 WiFi (if porting)
#include <HTTPClient.h>        // HTTP requests (ESP32)
#include <WiFiClient.h>

// === Your Pins and Sensor Configuration ===
const int engineTempPin = A0;
const int oilPressurePin = A1;
const int batteryVoltPin = A2;
const int tirePressurePin = A3;
const int brakeWearPin = A4;
const int rpmPin = 2;          // RPM from Hall sensor
const int speedSensorPin = 3;  // Speed sensor (digital)

// === Variables ===
volatile unsigned int rpmCount = 0;
volatile unsigned int speedCount = 0;
unsigned long lastRPMCheck = 0;
unsigned long lastSpeedCheck = 0;
float rpm = 0;
float vehicleSpeed = 0;
unsigned long mileage = 0;

const float wheelCircumference = 2.0; // meters (simulated)

// === Interrupt Service Routines ===
void rpmISR() {
  rpmCount++;
}

void speedISR() {
  speedCount++;
}

// === Setup ===
void setup() {
  Serial.begin(9600);

  pinMode(rpmPin, INPUT_PULLUP);
  pinMode(speedSensorPin, INPUT_PULLUP);

  attachInterrupt(digitalPinToInterrupt(rpmPin), rpmISR, RISING);
  attachInterrupt(digitalPinToInterrupt(speedSensorPin), speedISR, RISING);

  lastRPMCheck = millis();
  lastSpeedCheck = millis();
}

// === Main Loop ===
void loop() {
  unsigned long currentTime = millis();

  float engineTemp = analogRead(engineTempPin) * (5.0 / 1023.0) * 100.0;
  float oilPressure = analogRead(oilPressurePin) * (5.0 / 1023.0) * 100.0;
  float batteryVoltage = analogRead(batteryVoltPin) * (5.0 / 1023.0) * (12.6 / 3.3);
  float tirePressure = analogRead(tirePressurePin) * (5.0 / 1023.0) * 50.0;
  float brakeWear = analogRead(brakeWearPin) * (100.0 / 1023.0);
  float fuelEfficiency = random(18, 32);

  if (currentTime - lastRPMCheck >= 1000) {
    rpm = rpmCount * 60;
    rpmCount = 0;
    lastRPMCheck = currentTime;
  }

  if (currentTime - lastSpeedCheck >= 1000) {
    float wheelRevs = speedCount;
    vehicleSpeed = (wheelRevs * wheelCircumference) / 1000.0 * 3600.0;
    mileage += vehicleSpeed / 3600.0;
    speedCount = 0;
    lastSpeedCheck = currentTime;
  }

  Serial.println("====== Vehicle Sensor Data ======");
  Serial.print("Engine Temperature: "); Serial.print(engineTemp); Serial.println(" Â°C");
  Serial.print("Oil Pressure: "); Serial.print(oilPressure); Serial.println(" kPa");
  Serial.print("Battery Voltage: "); Serial.print(batteryVoltage); Serial.println(" V");
  Serial.print("Tire Pressure: "); Serial.print(tirePressure); Serial.println(" psi");
  Serial.print("Brake Wear Level: "); Serial.print(brakeWear); Serial.println(" %");
  Serial.print("Fuel Efficiency: "); Serial.print(fuelEfficiency); Serial.println(" km/l");
  Serial.print("RPM: "); Serial.println(rpm);
  Serial.print("Vehicle Speed: "); Serial.print(vehicleSpeed); Serial.println(" km/h");
  Serial.print("Mileage Covered: "); Serial.print(mileage); Serial.println(" km");
  Serial.println("==================================");

  delay(1000);
}